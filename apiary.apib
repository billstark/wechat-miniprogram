FORMAT: 1A
HOST: http://wechat-wechat-miniprogram.com/

# wechat-miniprogram API

This is a simple API endpoint for a wechat miniprogram named wechat-miniprogram. 
It supports basic queries for accounting.

## Users Summary [/summary/users/{host_id}]

### Gets from one user [GET]

This will list down all finacially related users to a specific user
and will show the amount of money owe/lent.

+ Parameters
    + host_id (string, required) - the wechat openid of a specific user.

+ Response 200 (application/json)

        {        
            "user": "45324b",
            "related_people": [
                {
                    "w_id": "12345a",
                    "amount": 3423
                },
                {
                    "w_id": "31451k",
                    "amount": 542
                }
            ]
        }

+ Response 400 (application/json)

        {
            "code": 400,
            "error": "Invalid openid format."
        }

+ Response 401 (application/json)

        {
            "code": 401,
            "error": "Permission Denied."
        }
        
+ Response 404 (application/json)

        {
            "code": 404,
            "error": "User not found."
        }

+ Response 500 (application/json)

        {
            "code": 500,
            "error": "Internal server error."
        }
        
## Group Summary [/summary/group/{host_id}/{group_id}]

### Gets between group members [GET]

Displays data that is inside a specific group, show summary of who owes who / who lends who
how much.

+ Parameters
    + host_id (string, required) - The openid of the user
    + group_id (number, required) - The id of the group
    
+ Response 200 (application/json)

        {
            "user": "45324b",
            "group": 582,
            "related_people": [
                {
                    "w_id": "12345a",
                    "amount": 3423
                }
            ]
        }

+ Response 400 (application/json)

        {
            "code": 400,
            "error": "Invalid id format."
        }

+ Response 401 (application/json)

        {
            "code": 401,
            "error": "Permission Denied."
        }
        
+ Response 404 (application/json)

        {
            "code": 404,
            "error": "Group / User not found."
        }

+ Response 500 (application/json)

        {
            "code": 500,
            "error": "Internal server error."
        }
        
## Groups Summary [/summary/groups/{host_id}]

### Gets group expenses [GET]

Here is to query all the groups that are related to a specific user. Only group names
and corresponding expenses will be displayed.

+ Parameters
    + host_id (string, required) - The openid of the user.
    
+ Response 200 (application/json)

        {
            "user": "45324b",
            "related_groups": [
                {
                    "g_id": 582,
                    "g_name": "292 Pasir Panjang",
                    "amount": 2490
                },
                {
                    "g_id": 293,
                    "g_name": "Dover",
                    "amount": -324
                }
            ]
        }

+ Response 400 (application/json)

        {
            "code": 400,
            "error": "Invalid group id format."
        }

+ Response 401 (application/json)

        {
            "code": 401,
            "error": "Permission Denied."
        }
        
+ Response 404 (application/json)

        {
            "code": 404,
            "error": "Group not found."
        }

+ Response 500 (application/json)

        {
            "code": 500,
            "error": "Internal server error."
        }
        
## Records between users [/records/user/{host_id}/{guest_id}]

### Gets between users [GET]

This will show all related records between two specific individuals.
Note that if `g_id` is negative, then means non-group expenses.

+ Parameters
    + host_id (string, required) - The person who is viewing the relation.
    + guest_id (string, required) - The person who has finacial relation to the viewer.

+ Response 200 (application/json)

        {
            "host_id": "12345a",
            "guest_id": "45324b",
            "records": [
                {
                    "id": 3241,
                    "g_id": 582,
                    "date": "2018-7-4",
                    "transaction": 40,
                    "description": "Go out for lunch."
                },
                {
                    "id": 3242,
                    "g_id": 582,
                    "date": "2018-7-4",
                    "transaction": -30,
                    "description": "Go out for dinner."
                },
                {
                    "id": 3243,
                    "g_id": -1,
                    "date": "2018-7-4",
                    "transaction": -10,
                    "description": "Settle up."
                }
            ]
        }
        
+ Response 400 (application/json)

        {
            "code": 400,
            "error": "Invalid openid format."
        }

+ Response 401 (application/json)

        {
            "code": 401,
            "error": "Permission Denied."
        }
        
+ Response 404 (application/json)

        {
            "code": 404,
            "error": "User not found."
        }

+ Response 500 (application/json)

        {
            "code": 500,
            "error": "Internal server error."
        }

## Records inside groups [/records/group/{host_id}/{group_id}]

### Gets inside groups [GET]

Gets specific user-group relation. Display data about how money is spent for a user
inside a speicific group.

+ Parameters
    + host_id (string, required) - The openid of the user
    + group_id (number, required) - The id of the group
    
+ Response 200 (application/json)

        {
            "user": "45324b",
            "group": 582,
            "records": [
                 {
                    "id": 3243,
                    "date": "2018-7-4",
                    "amount": 69,
                    "payer": "45324b",
                    "spliters": [
                        {
                            "w_id": "12345a",
                        },
                        {
                            "w_id": "45324b"
                        }
                    ],
                    "description": "Dinner"
                },
                {
                    "id": 3249,
                    "date": "2018-7-5",
                    "amount": 34,
                    "player": "12345a",
                    "spliters": [
                        {
                            "w_id": "45324b"
                        }
                    ],
                    "description": "Settle up."
                }
            ]
        }

+ Response 400 (application/json)

        {
            "code": 400,
            "error": "Invalid id format."
        }

+ Response 401 (application/json)

        {
            "code": 401,
            "error": "Permission Denied."
        }
        
+ Response 404 (application/json)

        {
            "code": 404,
            "error": "Group / User not found."
        }

+ Response 500 (application/json)

        {
            "code": 500,
            "error": "Internal server error."
        }
        
## User Info [/info/user/{host_id}]

### Gets infomation about one user [GET]

This will get all infomation about a specific user.
Note that this require callers to specify the info fields that are needed.
By default it only returns avatar, nickname and id of the user.

+ Parameters
    + host_id (string, required) - The openid of the user

+ Request (application/json)
    + Body

            {
                "info_fields": ["friends, avatar, groups, nickname"]
            }

+ Response 200 (application/json)

        {
            "user": "45324b",
            "avatar": "http://photo-url.com",
            "nickname": "test0",
            "friends": [
                {
                    "w_id": "12345a",
                    "avatar": "http://photo-url.com",
                    "nickname": "test1"
                },
                {
                    "w_id": "45324b",
                    "avatar": "http://photo-url.com",
                    "nickname": "test2"
                }
            ],
            "groups": [
                {
                    "group_id": "582",
                    "group_name": "292 pasir panjang road"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "code": 400,
            "error": "Invalid id format."
        }

+ Response 401 (application/json)

        {
            "code": 401,
            "error": "Permission Denied."
        }
        
+ Response 404 (application/json)

        {
            "code": 404,
            "error": "Group / User not found."
        }

+ Response 500 (application/json)

        {
            "code": 500,
            "error": "Internal server error."
        }
        
## Group Info [/info/group/{group_id}]

### Gets infomation about one group [GET]

This will get all infomation about a specific group.
Note that this require callers to specify the info fields that are needed.
By default it only returns group name and member (for now)

+ Parameters
    + group_id (string, required) - The id of the group

+ Request (application/json)
    + Body

            {
                "info_fields": ["name, members"]
            }

+ Response 200 (application/json)

        {
            "group": "582",
            "name": "292 pasir panjang road",
            "members": [
                {
                    "w_id": "12345a",
                    "avatar": "http://photo-url.com",
                    "nickname": "test1"
                },
                {
                    "w_id": "45324b",
                    "avatar": "http://photo-url.com",
                    "nickname": "test2"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "code": 400,
            "error": "Invalid id format."
        }

+ Response 401 (application/json)

        {
            "code": 401,
            "error": "Permission Denied."
        }
        
+ Response 404 (application/json)

        {
            "code": 404,
            "error": "Group / User not found."
        }

+ Response 500 (application/json)

        {
            "code": 500,
            "error": "Internal server error."
        }